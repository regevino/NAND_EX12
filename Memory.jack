// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init()
    {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address)
    {
        var int value;
        let value = ram[address];
        return value;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value)
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size)
    {
        var int block_size;
        var int next_block;
        var int newBlock_base;

        let next_block = freeList;
        let block_size = Memory.peek(next_block + 1);

        while (block_size < size + 2)
        {
            let next_block = Memory.peek(next_block);
            if (next_block = 0)
            {
                return null;
            }
            let block_size = Memory.peek(next_block + 1);
        }
        let newBlock_base = block_size - (size + 2);
        do Memory.poke(next_block + 1, newBlock_base);
        do Memory.poke(newBlock_base, 0);
        do Memory.poke(newBlock_base + 1, size + 2);
        return newBlock_base + 2;


    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o)
    {
        
        var int block;
        var int next_block;

        let next_block = freeList;
        let block = o - 2;
        while (~(Memory.peek(next_block) = 0))
        {
            let next_block = Memory.peek(next_block);
        }
        do Memory.poke(next_block, block);
        return;
    }    
}
